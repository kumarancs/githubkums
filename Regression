# -*- coding: utf-8 -*-
"""
Created on Thu Feb 20 06:54:04 2020

@author: 146846
"""

import pandas as pd
import numpy as np

# for data visualization
import seaborn as sns

# for data partitioning
from sklearn.model_selection import train_test_split

# for logistic regression
from sklearn.linear_model import LogisticRegression

# import performance metrics
from sklearn.metrics import accuracy_score, confusion_matrix

# import data
data_income=pd.read_csv('income.csv')

# create a copy of original data
data=data_income.copy()
data_income

# Exploratory data analysis
# 1. Getting to know the data
# 2. Data preprocessing ( missing values)
#3. Cross tables and data visualisation

# check the data type of the variables
print(data.info())

# check for missing values
data.isnull()
print('columns with null values \n',data.isnull().sum())
# no missing values

# Summary of numerical varaibles - descriptive
summary_num=data.describe()
#print(summary_num)

# Summary of categorical variables
summary_cate = data.describe(include="O")
print(summary_cate)

data['JobType'].value_counts()

# check for unique values
print(np.unique(data['JobType']))
# contains ' ?'

data=pd.read_csv('income.csv',na_values=[" ?"])

# Data Pre-processing

print(data.isnull().sum())

missing=data[data.isnull().any(axis=1)]
# axis = 1 considers atleast if one column is missing

data2=data.dropna(axis=0)

correlation=data2.corr()

# Cross tables & Data Visualisation
# Extract column names


print(data2.columns)

# countwise splitup based on gender
gender = pd.crosstab(index=data2["gender"],columns='count',normalize=True)
print(gender)
# Female 32% male 68%
# Salary splitup based on gender
gender_salstat=pd.crosstab(index=data2["gender"],columns=data2['SalStat'],margins=True,normalize='index')

SalStat=sns.countplot(data2['SalStat'])
# bar chart

# Histogram on Age
sns.distplot(data2['age'],bins=10,kde=False)

# Box plot - Age vs Salary status

sns.boxplot('SalStat','age',data=data2)
data2.groupby('SalStat')['age'].median()

# Exploratory data analysis
# JobType vs salary status
JobType_salstat=pd.crosstab(index=data2["JobType"],columns=data2['SalStat'],margins=True,normalize='index')
# Education type vs Salary status
EduType_salstat=pd.crosstab(index=data2["EdType"],columns=data2['SalStat'],margins=False,normalize='index')

# Reindexing the salary status names to 0, 1
data2['SalStat']=data2['SalStat'].map({' less than or equal to 50,000':0,' greater than 50,000':1})
print(data2['SalStat'])

# Convert categorical values to numerals

new_data=pd.get_dummies(data2, drop_first=True)

# Store the new column names
columns_list = list(new_data.columns)

# Separate the dependent variables from independant variables

features = list(set(columns_list)-set(['SalStat']))
print(features)

# Store y axis with SalStat - output variable
y=new_data['SalStat'].values
print(y)

# Other variables in x axis
x=new_data[features].values
print(x)

# Split the data into train and test
train_x,test_x,train_y,test_y=train_test_split(x,y,test_size=0.3,random_state=0)

# Make aninstance ofth emodel
logistic = LogisticRegression()
logistic.fit(train_x,train_y)

print(logistic.coef_)
logistic.intercept_
print(logistic.intercept_)

# Prediction from Test Data
prediction=logistic.predict(test_x)
print(prediction)

# Evaluate the performance of the classification model using confusion matrix
# Gives the number of correct predictions, number of incorrect predictions

confusion_matrix=confusion_matrix(test_y,prediction)
print(confusion_matrix)

# Calculate the accuracy
accuracy_score=accuracy_score(test_y,prediction)
print(accuracy_score)

# Printing the misclassified values from prediction
print('Misclassified Samples %d'% (test_y != prediction).sum())

# Import KNN library

from sklearn.neighbors import KNeighborsClassifier

# import library for plotting
import matplotlib.pyplot as plt

# Store the KNN classifierlogistic.intercept_

#pd.set_option('display.max_columns',500)











